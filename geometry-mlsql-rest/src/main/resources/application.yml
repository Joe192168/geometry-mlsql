server:
  port: 8088
  servlet:
    context-path: /

engine:
  url: http://192.168.20.209:9003

cluster:
  url: http://192.168.20.209:8080

my_url:
  url: dbc:mysql://192.168.2.239:3306/dev_mlsql_console?characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false

cloud:
  url:

user:
  home: /home/mlsql
  single.user.upload.bytes: 131072000
  enable.auth.center: false
  auth.secret: mlsql


logging:
  config: classpath:log4j2.xml

spring:
  datasource:
      driver-class-name: com.mysql.jdbc.Driver
      platform: mysql
      type: com.alibaba.druid.pool.DruidDataSource
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化大小，最小，最大
      # druid 配置: https://github.com/alibaba/druid/wiki/
      initialSize: 1
      minIdle: 1
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      removeAbandoned: true
      removeAbandonedTimeout: 1800
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: select 1
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 50
      # 配置监控统计拦截的filters，stat用于监控界面，'wall'用于防火墙防御sql注入, slf4j用于druid记录sql日志
      filters: stat,slf4j,wall
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 合并多个DruidDataSource的监控数据
      useGlobalDataSourceStat: false
  profiles:
    active: dev

  # redis
  redis:
    # 数据库索引，默认0
    database: 0
#    # 服务器IP地址
    host: 127.0.0.1
#    # 连接端口
    port: 6379
#    # Redis服务器连接密码（默认为空）
    password:
  artemis:
    embedded:
      cluster-password:

mybatis:
  #这个是可以打印sql、参数、查询结果的
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    call-setters-on-nulls: true
  # 指向实体类包路径
  type-aliases-package: com.geominfo.mlsql.domain.vo
  # mapper xml 文件地址
  mapper-locations: classpath*:mappers/*.xml,classpath*:mapper/*.xml
  # 检查 mybatis 配置是否存在，一般命名为 mybatis-config.xml
  check-config-location: true
  # 执行模式。默认是 SIMPLE
  executor-type: simple

#pagehelper分页插件
#reasonable分页参数合理化，3.3.0以上版本可用，默认是false。 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页； 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据。
pagehelper:
    helperDialect: mysql
    reasonable: false
    supportMethodsArguments: true
    params: count=countSql

jasypt:
  encryptor:
    password: swhdg

---
# 开发环境配置(配置项只包括环境不同项)
spring:
    profiles: dev
    datasource:
      url: jdbc:mysql://192.168.2.239:3306/dev_mlsql_console?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
      username: root
      password: 123456
    redis:
      # 服务器IP地址
      host: 127.0.0.1
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:

---
# 测试环境配置(配置项只包括不同项)

spring:
    profiles: test
    datasource:
      url: jdbc:mysql://192.168.3.69:3306/dev_mlsql_console
      username: root
      password: ENC(dDDdKbUfeKDH0ERliSO7Wg==)
    redis:
      # 服务器IP地址
      host: 127.0.0.1
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:

---
# 生产环境配置(配置项只包括不同项)

spring:
    profiles: prod
    datasource:
      url: jdbc:mysql://192.168.3.69:3306/dev_mlsql_console
      username: root
      password: ENC(dDDdKbUfeKDH0ERliSO7Wg==)
    redis:
      # 服务器IP地址
      host: 127.0.0.1
      # 连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:
