<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<packaging>pom</packaging>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.geominfo.mlsql</groupId>
	<artifactId>geometry-mlsql</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>geometry-mlsql</name>
	<description>Demo project for Spring Boot</description>

	<modules>
		<module>geometry-mlsql-utils</module>
		<module>geometry-mlsql-persistence</module>
		<module>geometry-mlsql-service</module>
		<module>geometry-mlsql-rest</module>
		<module>geometry-mlsql-generator</module>
	</modules>


	<properties>
		<java.version>1.8</java.version>
		<scala.version>2.11.8</scala.version>
		<swagger.version>2.9.2</swagger.version>
		<mybatis-spring-boot.version>1.3.1</mybatis-spring-boot.version>
		<druid.version>1.1.10</druid.version>
		<mysql.version>5.1.21</mysql.version>
		<log4jdbc.version>1.2</log4jdbc.version>
		<disruptor.version>3.3.6</disruptor.version>
		<httpclient.version>4.5.6</httpclient.version>
		<jasypt.version>2.0.0</jasypt.version>
		<mybatis-spring-boot-starter.version>1.3.2</mybatis-spring-boot-starter.version>
		<lombok.version>1.16.18</lombok.version>
		<scala.version>2.11.8</scala.version>
		<pagehelper-spring-boot-starter.version>1.2.5</pagehelper-spring-boot-starter.version>
		<pagehelper.version>5.1.10</pagehelper.version>
		<swagger-annotations.version>1.5.20</swagger-annotations.version>
		<swagger-models.version>1.5.22</swagger-models.version>
		<maven-scala-plugin.version>2.15.2</maven-scala-plugin.version>
		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
		<maven-surefire-plugin.version>2.19.1</maven-surefire-plugin.version>
		<fastjson.version>1.2.47</fastjson.version>
		<jwt.version>0.9.1</jwt.version>
		<shiro.version>1.4.0</shiro.version>
		<commons-lang.version>2.6</commons-lang.version>
		<commons-lang3.version>3.7</commons-lang3.version>
	</properties>

	<build>
		<plugins>
			<!--java编译插件-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!--默认关掉单元测试 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<skipTests>true</skipTests>
				</configuration>
			</plugin>
			<!--scala编译插件-->
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
				<version>${maven-scala-plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<compilerArguments>
						<extdirs>libs</extdirs>
						<verbose />
						<bootclasspath>C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/rt.jar;C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/jce.jar;C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/lib/jsse.jar</bootclasspath>
					</compilerArguments>
				</configuration>
			</plugin>
			<!--<plugin>
				<groupId>org.springframework.boot</groupId>
				&lt;!&ndash;在添加了该插件之后，当运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。这在很大程度上简化了应用的部署，只需要安装了 JRE 就可以运行。&ndash;&gt;
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>-->

		</plugins>
	</build>

	<!--<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<includes>
						<include>**/*.java</include>
						<include>**/*.scala</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<compilerArgument>-g</compilerArgument>
					<verbose>true</verbose>
					<encoding>UTF-8</encoding>
				</configuration>

			</plugin>
			<plugin>
				&lt;!&ndash; maven 打包插件 打原始jar包 第三方依赖打入jar包中&ndash;&gt;
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							&lt;!&ndash;这里要替换成jar包main方法所在类 &ndash;&gt;
							<mainClass>com.geominfo.mlsql.GeometryMlsqlRestApplication</mainClass>
						</manifest>
						<manifestEntries>
							<Class-Path>.</Class-Path>
						</manifestEntries>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id> &lt;!&ndash; this is used for inheritance merges &ndash;&gt;
						<phase>package</phase> &lt;!&ndash; 指定在打包节点执行jar包合并操作 &ndash;&gt;
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.scala-tools</groupId>
				<artifactId>maven-scala-plugin</artifactId>
				<version>2.15.2</version>
				<configuration>
					<args>
						<arg>
							-g:vars
						</arg>
					</args>
					<verbose>true</verbose>
				</configuration>
				<executions>
					<execution>
						<id>scala-compile-first</id>
						<phase>process-resources</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>scala-test-compile</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			&lt;!&ndash;   要将源码放上去，需要加入这个插件    &ndash;&gt;
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<attach>true</attach>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			&lt;!&ndash;将jdk也打入jar&ndash;&gt;
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<compilerArguments>
						<extdirs>libs</extdirs>
						&lt;!&ndash;  rt包没有打到项目中去 &ndash;&gt;
						<verbose />
						&lt;!&ndash; C:/Program Files/Java/jdk1.8.0_201 是我本地安装的jdk家目录，rt.jar等jar 我在 jdk家目录下的 /jre/lib/ 目录中有发现存在，你们需要注意确认自己的实际情况,Windows分隔符英文分号,linux分隔符英文冒号  &ndash;&gt;
						<bootclasspath>C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/rt.jar;C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/jce.jar;C:/javaAndscala/Java/jdk1.8.0_201/jre/lib/lib/jsse.jar</bootclasspath>
					</compilerArguments>
				</configuration>
			</plugin>

		</plugins>
	</build>-->


</project>
